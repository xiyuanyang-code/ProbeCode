{
  "classes": [
    {
      "bases": [],
      "docstring": "A simple calculator class that provides basic mathematical operations.\n\nAttributes:\n    precision (int): The number of decimal places to round the results to,\n                     defaults to 2.",
      "line_end": 84,
      "line_start": 13,
      "methods": [
        {
          "args": [
            {
              "annotation": null,
              "default": null,
              "name": "self"
            },
            {
              "annotation": "int",
              "default": "2",
              "name": "precision"
            }
          ],
          "docstring": "Initializes the Calculator instance.\n\nArgs:\n    precision (int): The number of decimal places for the result.",
          "line_end": 29,
          "line_start": 22,
          "name": "__init__",
          "returns": null,
          "source_code": "    def __init__(self, precision: int = 2):\n        self.precision = precision"
        },
        {
          "args": [
            {
              "annotation": null,
              "default": null,
              "name": "self"
            },
            {
              "annotation": "float",
              "default": null,
              "name": "a"
            },
            {
              "annotation": "float",
              "default": null,
              "name": "b"
            }
          ],
          "docstring": "Performs addition.\n\nArgs:\n    a (float): The first operand.\n    b (float): The second operand.\n\nReturns:\n    float: The sum of the two operands, rounded to the specified precision.",
          "line_end": 42,
          "line_start": 31,
          "name": "add",
          "returns": "float",
          "source_code": "    def add(self, a: float, b: float) -> float:\n        return round(a + b, self.precision)"
        },
        {
          "args": [
            {
              "annotation": null,
              "default": null,
              "name": "self"
            },
            {
              "annotation": "float",
              "default": null,
              "name": "a"
            },
            {
              "annotation": "float",
              "default": null,
              "name": "b"
            }
          ],
          "docstring": "Performs subtraction.\n\nArgs:\n    a (float): The first operand.\n    b (float): The second operand.\n\nReturns:\n    float: The difference of the two operands, rounded to the specified precision.",
          "line_end": 55,
          "line_start": 44,
          "name": "subtract",
          "returns": "float",
          "source_code": "    def subtract(self, a: float, b: float) -> float:\n        return round(a - b, self.precision)"
        },
        {
          "args": [
            {
              "annotation": null,
              "default": null,
              "name": "self"
            },
            {
              "annotation": "float",
              "default": null,
              "name": "a"
            },
            {
              "annotation": "float",
              "default": null,
              "name": "b"
            }
          ],
          "docstring": "Performs multiplication.\n\nArgs:\n    a (float): The first operand.\n    b (float): The second operand.\n\nReturns:\n    float: The product of the two operands, rounded to the specified precision.",
          "line_end": 68,
          "line_start": 57,
          "name": "multiply",
          "returns": "float",
          "source_code": "    def multiply(self, a: float, b: float) -> float:\n        return round(a * b, self.precision)"
        },
        {
          "args": [
            {
              "annotation": null,
              "default": null,
              "name": "self"
            },
            {
              "annotation": "float",
              "default": null,
              "name": "a"
            },
            {
              "annotation": "float",
              "default": null,
              "name": "b"
            }
          ],
          "docstring": "Performs division.\n\nArgs:\n    a (float): The dividend.\n    b (float): The divisor.\n\nReturns:\n    Optional[float]: The quotient of the two operands. Returns None if the\n                     divisor is 0.",
          "line_end": 84,
          "line_start": 70,
          "name": "divide",
          "returns": "Optional[float]",
          "source_code": "    def divide(self, a: float, b: float) -> Optional[float]:\n        if b == 0:\n            return None\n        return round(a / b, self.precision)"
        }
      ],
      "name": "Calculator",
      "source_code": "class Calculator:\n    \n    def __init__(self, precision: int = 2):\n        \"\"\"\n        Initializes the Calculator instance.\n\n        Args:\n            precision (int): The number of decimal places for the result.\n        \"\"\"\n        self.precision = precision\n        \n    def add(self, a: float, b: float) -> float:\n        \"\"\"\n        Performs addition.\n\n        Args:\n            a (float): The first operand.\n            b (float): The second operand.\n\n        Returns:\n            float: The sum of the two operands, rounded to the specified precision.\n        \"\"\"\n        return round(a + b, self.precision)\n        \n    def subtract(self, a: float, b: float) -> float:\n        \"\"\"\n        Performs subtraction.\n\n        Args:\n            a (float): The first operand.\n            b (float): The second operand.\n\n        Returns:\n            float: The difference of the two operands, rounded to the specified precision.\n        \"\"\"\n        return round(a - b, self.precision)\n        \n    def multiply(self, a: float, b: float) -> float:\n        \"\"\"\n        Performs multiplication.\n\n        Args:\n            a (float): The first operand.\n            b (float): The second operand.\n\n        Returns:\n            float: The product of the two operands, rounded to the specified precision.\n        \"\"\"\n        return round(a * b, self.precision)\n        \n    def divide(self, a: float, b: float) -> Optional[float]:\n        \"\"\"\n        Performs division.\n\n        Args:\n            a (float): The dividend.\n            b (float): The divisor.\n\n        Returns:\n            Optional[float]: The quotient of the two operands. Returns None if the\n                             divisor is 0.\n        \"\"\"\n        if b == 0:\n            return None\n        return round(a / b, self.precision)"
    },
    {
      "bases": [
        "Calculator"
      ],
      "docstring": "An advanced calculator class that inherits from Calculator and provides\nadditional mathematical operations.",
      "line_end": 119,
      "line_start": 87,
      "methods": [
        {
          "args": [
            {
              "annotation": null,
              "default": null,
              "name": "self"
            },
            {
              "annotation": "float",
              "default": null,
              "name": "base"
            },
            {
              "annotation": "float",
              "default": null,
              "name": "exponent"
            }
          ],
          "docstring": "Performs exponentiation.\n\nArgs:\n    base (float): The base number.\n    exponent (float): The exponent.\n\nReturns:\n    float: The result of the power operation, rounded to the specified precision.",
          "line_end": 104,
          "line_start": 93,
          "name": "power",
          "returns": "float",
          "source_code": "    def power(self, base: float, exponent: float) -> float:\n        return round(base ** exponent, self.precision)"
        },
        {
          "args": [
            {
              "annotation": null,
              "default": null,
              "name": "self"
            },
            {
              "annotation": "float",
              "default": null,
              "name": "value"
            }
          ],
          "docstring": "Calculates the square root.\n\nArgs:\n    value (float): The number to find the square root of.\n\nReturns:\n    Optional[float]: The square root of the number. Returns None if the\n                     input is negative.",
          "line_end": 119,
          "line_start": 106,
          "name": "sqrt",
          "returns": "Optional[float]",
          "source_code": "    def sqrt(self, value: float) -> Optional[float]:\n        if value < 0:\n            return None\n        return round(math.sqrt(value), self.precision)"
        }
      ],
      "name": "AdvancedCalculator",
      "source_code": "class AdvancedCalculator(Calculator):\n    \n    def power(self, base: float, exponent: float) -> float:\n        \"\"\"\n        Performs exponentiation.\n\n        Args:\n            base (float): The base number.\n            exponent (float): The exponent.\n\n        Returns:\n            float: The result of the power operation, rounded to the specified precision.\n        \"\"\"\n        return round(base ** exponent, self.precision)\n        \n    def sqrt(self, value: float) -> Optional[float]:\n        \"\"\"\n        Calculates the square root.\n\n        Args:\n            value (float): The number to find the square root of.\n\n        Returns:\n            Optional[float]: The square root of the number. Returns None if the\n                             input is negative.\n        \"\"\"\n        if value < 0:\n            return None\n        return round(math.sqrt(value), self.precision)"
    },
    {
      "bases": [],
      "docstring": "A utility class for processing and analyzing data.\n\nAttributes:\n    data (List[Any]): The list of data to be processed.",
      "line_end": 211,
      "line_start": 165,
      "methods": [
        {
          "args": [
            {
              "annotation": null,
              "default": null,
              "name": "self"
            },
            {
              "annotation": "List[Any]",
              "default": null,
              "name": "data"
            }
          ],
          "docstring": "Initializes the DataProcessor instance.\n\nArgs:\n    data (List[Any]): A list containing various data types.",
          "line_end": 180,
          "line_start": 173,
          "name": "__init__",
          "returns": null,
          "source_code": "    def __init__(self, data: List[Any]):\n        self.data = data"
        },
        {
          "args": [
            {
              "annotation": null,
              "default": null,
              "name": "self"
            }
          ],
          "docstring": "Returns the maximum value from the data list.\n\nReturns:\n    Optional[Any]: The maximum value in the list. Returns None if the list is empty.",
          "line_end": 191,
          "line_start": 182,
          "name": "get_max",
          "returns": "Optional[Any]",
          "source_code": "    def get_max(self) -> Optional[Any]:\n        if not self.data:\n            return None\n        return max(self.data)"
        },
        {
          "args": [
            {
              "annotation": null,
              "default": null,
              "name": "self"
            }
          ],
          "docstring": "Returns the minimum value from the data list.\n\nReturns:\n    Optional[Any]: The minimum value in the list. Returns None if the list is empty.",
          "line_end": 202,
          "line_start": 193,
          "name": "get_min",
          "returns": "Optional[Any]",
          "source_code": "    def get_min(self) -> Optional[Any]:\n        if not self.data:\n            return None\n        return min(self.data)"
        },
        {
          "args": [
            {
              "annotation": null,
              "default": null,
              "name": "self"
            }
          ],
          "docstring": "Counts the occurrences of each element in the list.\n\nReturns:\n    Dict[Any, int]: A dictionary where keys are elements and values are their counts.",
          "line_end": 211,
          "line_start": 204,
          "name": "count_occurrences",
          "returns": "Dict[Any, int]",
          "source_code": "    def count_occurrences(self) -> Dict[Any, int]:\n        return dict(collections.Counter(self.data))"
        }
      ],
      "name": "DataProcessor",
      "source_code": "class DataProcessor:\n    \n    def __init__(self, data: List[Any]):\n        \"\"\"\n        Initializes the DataProcessor instance.\n\n        Args:\n            data (List[Any]): A list containing various data types.\n        \"\"\"\n        self.data = data\n        \n    def get_max(self) -> Optional[Any]:\n        \"\"\"\n        Returns the maximum value from the data list.\n\n        Returns:\n            Optional[Any]: The maximum value in the list. Returns None if the list is empty.\n        \"\"\"\n        if not self.data:\n            return None\n        return max(self.data)\n        \n    def get_min(self) -> Optional[Any]:\n        \"\"\"\n        Returns the minimum value from the data list.\n\n        Returns:\n            Optional[Any]: The minimum value in the list. Returns None if the list is empty.\n        \"\"\"\n        if not self.data:\n            return None\n        return min(self.data)\n        \n    def count_occurrences(self) -> Dict[Any, int]:\n        \"\"\"\n        Counts the occurrences of each element in the list.\n\n        Returns:\n            Dict[Any, int]: A dictionary where keys are elements and values are their counts.\n        \"\"\"\n        return dict(collections.Counter(self.data))"
    },
    {
      "bases": [],
      "docstring": "A class with static methods for various string manipulation utilities.",
      "line_end": 257,
      "line_start": 214,
      "methods": [
        {
          "args": [
            {
              "annotation": "str",
              "default": null,
              "name": "s"
            }
          ],
          "docstring": "Reverses a string.\n\nArgs:\n    s (str): The string to reverse.\n\nReturns:\n    str: The reversed string.",
          "line_end": 230,
          "line_start": 220,
          "name": "reverse_string",
          "returns": "str",
          "source_code": "    def reverse_string(s: str) -> str:\n        return s[::-1]"
        },
        {
          "args": [
            {
              "annotation": "str",
              "default": null,
              "name": "s"
            }
          ],
          "docstring": "Checks if a string is a palindrome.\n\nArgs:\n    s (str): The string to check.\n\nReturns:\n    bool: True if the string is a palindrome, False otherwise.",
          "line_end": 244,
          "line_start": 233,
          "name": "is_palindrome",
          "returns": "bool",
          "source_code": "    def is_palindrome(s: str) -> bool:\n        s_cleaned = \"\".join(filter(str.isalnum, s)).lower()\n        return s_cleaned == s_cleaned[::-1]"
        },
        {
          "args": [
            {
              "annotation": "str",
              "default": null,
              "name": "s"
            }
          ],
          "docstring": "Counts the number of words in a string.\n\nArgs:\n    s (str): The string to count words from.\n\nReturns:\n    int: The number of words in the string.",
          "line_end": 257,
          "line_start": 247,
          "name": "count_words",
          "returns": "int",
          "source_code": "    def count_words(s: str) -> int:\n        return len(s.split())"
        }
      ],
      "name": "StringUtils",
      "source_code": "class StringUtils:\n    \n    @staticmethod\n    def reverse_string(s: str) -> str:\n        \"\"\"\n        Reverses a string.\n\n        Args:\n            s (str): The string to reverse.\n\n        Returns:\n            str: The reversed string.\n        \"\"\"\n        return s[::-1]\n        \n    @staticmethod\n    def is_palindrome(s: str) -> bool:\n        \"\"\"\n        Checks if a string is a palindrome.\n\n        Args:\n            s (str): The string to check.\n\n        Returns:\n            bool: True if the string is a palindrome, False otherwise.\n        \"\"\"\n        s_cleaned = \"\".join(filter(str.isalnum, s)).lower()\n        return s_cleaned == s_cleaned[::-1]\n\n    @staticmethod\n    def count_words(s: str) -> int:\n        \"\"\"\n        Counts the number of words in a string.\n\n        Args:\n            s (str): The string to count words from.\n\n        Returns:\n            int: The number of words in the string.\n        \"\"\"\n        return len(s.split())"
    }
  ],
  "file_path": "./CodingAgent/pyparser/example/example.py",
  "functions": [
    {
      "args": [
        {
          "annotation": "int",
          "default": null,
          "name": "n"
        }
      ],
      "docstring": "Generates the first n numbers of the Fibonacci sequence.\n\nArgs:\n    n (int): The number of Fibonacci numbers to generate.\n\nReturns:\n    List[int]: A list containing the first n Fibonacci numbers.",
      "line_end": 142,
      "line_start": 122,
      "name": "fibonacci",
      "returns": "List[int]",
      "source_code": "def fibonacci(n: int) -> List[int]:\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n        \n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib"
    },
    {
      "args": [
        {
          "annotation": "int",
          "default": null,
          "name": "num"
        }
      ],
      "docstring": "Checks if a number is a prime number.\n\nArgs:\n    num (int): The integer to check.\n\nReturns:\n    bool: True if the number is prime, False otherwise.",
      "line_end": 160,
      "line_start": 145,
      "name": "is_prime",
      "returns": "bool",
      "source_code": "def is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
      "args": [
        {
          "annotation": "int",
          "default": null,
          "name": "n"
        }
      ],
      "docstring": "Calculates the factorial of a non-negative integer using recursion.\n\nArgs:\n    n (int): The non-negative integer to calculate the factorial of.\n\nReturns:\n    int: The factorial of n.\n\nRaises:\n    ValueError: If n is a negative number.",
      "line_end": 278,
      "line_start": 260,
      "name": "factorial",
      "returns": "int",
      "source_code": "def factorial(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"
    },
    {
      "args": [
        {
          "annotation": "List[float]",
          "default": null,
          "name": "nums"
        }
      ],
      "docstring": "Finds the maximum value in a list of floating-point numbers.\n\nArgs:\n    nums (List[float]): A list of floats.\n\nReturns:\n    Optional[float]: The maximum value in the list. Returns None if the list is empty.",
      "line_end": 297,
      "line_start": 281,
      "name": "find_max_in_list",
      "returns": "Optional[float]",
      "source_code": "def find_max_in_list(nums: List[float]) -> Optional[float]:\n    if not nums:\n        return None\n    max_val = nums[0]\n    for num in nums[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val"
    },
    {
      "args": [
        {
          "annotation": "Dict",
          "default": null,
          "name": "dict1"
        },
        {
          "annotation": "Dict",
          "default": null,
          "name": "dict2"
        }
      ],
      "docstring": "Merges two dictionaries. If a key exists in both dictionaries, the value from\nthe second dictionary is used.\n\nArgs:\n    dict1 (Dict): The first dictionary.\n    dict2 (Dict): The second dictionary.\n\nReturns:\n    Dict: A new dictionary containing the merged key-value pairs.",
      "line_end": 314,
      "line_start": 300,
      "name": "merge_dicts",
      "returns": "Dict",
      "source_code": "def merge_dicts(dict1: Dict, dict2: Dict) -> Dict:\n    merged = dict1.copy()\n    merged.update(dict2)\n    return merged"
    },
    {
      "args": [],
      "docstring": "The main function to demonstrate the functionality of all classes and functions.",
      "line_end": 353,
      "line_start": 317,
      "name": "main",
      "returns": null,
      "source_code": "def main():\n    print(\"--- Original Calculator Test ---\")\n    calc = Calculator()\n    print(f\"5 + 3 = {calc.add(5, 3)}\")\n    \n    adv_calc = AdvancedCalculator()\n    print(f\"2^8 = {adv_calc.power(2, 8)}\")\n    \n    fib_seq = fibonacci(10)\n    print(f\"First 10 Fibonacci numbers: {fib_seq}\")\n    \n    num = 17\n    print(f\"Is {num} a prime number? {is_prime(num)}\")\n    \n    print(\"\\n--- New Functionality Test ---\")\n    \n    processor = DataProcessor([1, 2, 3, 4, 3, 2, 1, 5])\n    print(f\"Maximum value: {processor.get_max()}\")\n    print(f\"Element occurrences: {processor.count_occurrences()}\")\n    \n    reversed_str = StringUtils.reverse_string(\"hello world\")\n    print(f\"Reversed string: {reversed_str}\")\n    \n    is_pali = StringUtils.is_palindrome(\"A man, a plan, a canal: Panama\")\n    print(f\"'A man, a plan, a canal: Panama' is a palindrome? {is_pali}\")\n    \n    try:\n        fact_5 = factorial(5)\n        print(f\"Factorial of 5: {fact_5}\")\n    except ValueError as e:\n        print(e)\n    \n    merged_dict = merge_dicts({'a': 1, 'b': 2}, {'b': 3, 'c': 4})\n    print(f\"Merged dictionaries: {merged_dict}\")"
    }
  ],
  "top_level_code": [
    {
      "line_end": 4,
      "line_start": 1,
      "source_code": "\"\"\"\nA sample Python file containing multiple classes and functions to demonstrate\nobject-oriented and functional programming concepts.\n\"\"\"",
      "type": "Expr"
    },
    {
      "line_end": 6,
      "line_start": 6,
      "source_code": "import math",
      "type": "Import"
    },
    {
      "line_end": 7,
      "line_start": 7,
      "source_code": "import collections",
      "type": "Import"
    },
    {
      "line_end": 8,
      "line_start": 8,
      "source_code": "from typing import List, Optional, Dict, Any, Deque",
      "type": "ImportFrom"
    },
    {
      "line_end": 357,
      "line_start": 356,
      "source_code": "if __name__ == \"__main__\":\n    main()",
      "type": "If"
    }
  ]
}